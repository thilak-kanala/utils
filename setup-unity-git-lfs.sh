#!/bin/bash

# Unity Git LFS Setup Script
# This script automatically configures Git LFS for Unity projects
# Author: Thilak Kanala
# Version: 1.1

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE} Unity Git LFS Setup Script${NC}"
    echo -e "${BLUE}================================${NC}"
    echo ""
}

print_usage() {
    echo "Usage: $0 [UNITY_PROJECT_PATH]"
    echo ""
    echo "Arguments:"
    echo "  UNITY_PROJECT_PATH    Path to the Unity project directory (optional)"
    echo "                        If not provided, uses current directory"
    echo ""
    echo "Examples:"
    echo "  $0                                    # Setup in current directory"
    echo "  $0 ./my-unity-game                   # Setup in relative path"
    echo "  $0 /path/to/unity/project            # Setup in absolute path"
    echo "  $0 ~/Documents/MyUnityProject        # Setup in home directory path"
    echo ""
}

# Function to validate and set project directory
set_project_directory() {
    local target_dir="$1"
    
    # If no argument provided, use current directory
    if [[ -z "$target_dir" ]]; then
        PROJECT_DIR="$(pwd)"
        print_status "No project path provided. Using current directory: $PROJECT_DIR"
    else
        # Expand tilde and relative paths
        PROJECT_DIR="$(cd "$target_dir" 2>/dev/null && pwd || echo "")"
        
        # Check if directory exists and is accessible
        if [[ ! -d "$PROJECT_DIR" ]]; then
            print_error "Directory does not exist or is not accessible: $target_dir"
            print_error "Please check the path and try again."
            exit 1
        fi
        
        print_status "Using Unity project directory: $PROJECT_DIR"
    fi
    
    # Change to the project directory
    if ! cd "$PROJECT_DIR"; then
        print_error "Failed to change to directory: $PROJECT_DIR"
        exit 1
    fi
}

# Function to check if we're in a git repository
check_git_repo() {
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        print_error "Not in a git repository in: $PROJECT_DIR"
        print_error "Please initialize git first with: cd '$PROJECT_DIR' && git init"
        exit 1
    fi
    print_status "Git repository detected in: $PROJECT_DIR"
}

# Function to check if Unity project
check_unity_project() {
    if [[ ! -d "Assets" || ! -d "ProjectSettings" ]]; then
        print_warning "This doesn't appear to be a Unity project root directory: $PROJECT_DIR"
        print_warning "Expected to find Assets/ and ProjectSettings/ folders."
        read -p "Continue anyway? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_status "Exiting..."
            exit 0
        fi
    else
        print_status "Unity project structure detected in: $PROJECT_DIR"
    fi
}

# Function to install Git LFS
install_git_lfs() {
    print_status "Checking Git LFS installation..."
    
    if ! command -v git-lfs &> /dev/null; then
        print_error "Git LFS is not installed. Please install it first:"
        echo "  macOS: brew install git-lfs"
        echo "  Ubuntu: sudo apt install git-lfs"
        echo "  Windows: Download from https://git-lfs.github.io/"
        exit 1
    fi
    
    print_status "Git LFS is installed. Initializing..."
    git lfs install
}

# Function to create .gitattributes file
create_gitattributes() {
    print_status "Creating .gitattributes file for Unity..."
    
    # Backup existing .gitattributes if it exists
    if [[ -f ".gitattributes" ]]; then
        print_warning "Existing .gitattributes found. Creating backup..."
        cp .gitattributes .gitattributes.backup
    fi
    
    cat > .gitattributes << 'EOF'
# Unity Git LFS Configuration
# Generated by setup-unity-git-lfs.sh

# 3D Models
*.3dm filter=lfs diff=lfs merge=lfs -text
*.3ds filter=lfs diff=lfs merge=lfs -text
*.blend filter=lfs diff=lfs merge=lfs -text
*.c4d filter=lfs diff=lfs merge=lfs -text
*.collada filter=lfs diff=lfs merge=lfs -text
*.dae filter=lfs diff=lfs merge=lfs -text
*.dxf filter=lfs diff=lfs merge=lfs -text
*.fbx filter=lfs diff=lfs merge=lfs -text
*.jas filter=lfs diff=lfs merge=lfs -text
*.lws filter=lfs diff=lfs merge=lfs -text
*.lxo filter=lfs diff=lfs merge=lfs -text
*.ma filter=lfs diff=lfs merge=lfs -text
*.max filter=lfs diff=lfs merge=lfs -text
*.mb filter=lfs diff=lfs merge=lfs -text
*.obj filter=lfs diff=lfs merge=lfs -text
*.ply filter=lfs diff=lfs merge=lfs -text
*.skp filter=lfs diff=lfs merge=lfs -text
*.stl filter=lfs diff=lfs merge=lfs -text
*.ztl filter=lfs diff=lfs merge=lfs -text

# Audio
*.aif filter=lfs diff=lfs merge=lfs -text
*.aiff filter=lfs diff=lfs merge=lfs -text
*.it filter=lfs diff=lfs merge=lfs -text
*.mod filter=lfs diff=lfs merge=lfs -text
*.mp3 filter=lfs diff=lfs merge=lfs -text
*.ogg filter=lfs diff=lfs merge=lfs -text
*.s3m filter=lfs diff=lfs merge=lfs -text
*.wav filter=lfs diff=lfs merge=lfs -text
*.xm filter=lfs diff=lfs merge=lfs -text

# Video
*.asf filter=lfs diff=lfs merge=lfs -text
*.avi filter=lfs diff=lfs merge=lfs -text
*.flv filter=lfs diff=lfs merge=lfs -text
*.mov filter=lfs diff=lfs merge=lfs -text
*.mp4 filter=lfs diff=lfs merge=lfs -text
*.mpeg filter=lfs diff=lfs merge=lfs -text
*.mpg filter=lfs diff=lfs merge=lfs -text
*.ogv filter=lfs diff=lfs merge=lfs -text
*.wmv filter=lfs diff=lfs merge=lfs -text

# Images
*.bmp filter=lfs diff=lfs merge=lfs -text
*.exr filter=lfs diff=lfs merge=lfs -text
*.gif filter=lfs diff=lfs merge=lfs -text
*.hdr filter=lfs diff=lfs merge=lfs -text
*.iff filter=lfs diff=lfs merge=lfs -text
*.jpeg filter=lfs diff=lfs merge=lfs -text
*.jpg filter=lfs diff=lfs merge=lfs -text
*.pict filter=lfs diff=lfs merge=lfs -text
*.png filter=lfs diff=lfs merge=lfs -text
*.psd filter=lfs diff=lfs merge=lfs -text
*.tga filter=lfs diff=lfs merge=lfs -text
*.tif filter=lfs diff=lfs merge=lfs -text
*.tiff filter=lfs diff=lfs merge=lfs -text

# Compressed Archive
*.7z filter=lfs diff=lfs merge=lfs -text
*.bz2 filter=lfs diff=lfs merge=lfs -text
*.gz filter=lfs diff=lfs merge=lfs -text
*.rar filter=lfs diff=lfs merge=lfs -text
*.tar filter=lfs diff=lfs merge=lfs -text
*.zip filter=lfs diff=lfs merge=lfs -text

# Compiled Dynamic Library
*.dll filter=lfs diff=lfs merge=lfs -text
*.pdb filter=lfs diff=lfs merge=lfs -text
*.so filter=lfs diff=lfs merge=lfs -text

# Fonts
*.otf filter=lfs diff=lfs merge=lfs -text
*.ttf filter=lfs diff=lfs merge=lfs -text

# Executable
*.apk filter=lfs diff=lfs merge=lfs -text
*.exe filter=lfs diff=lfs merge=lfs -text

# ETC
*.a filter=lfs diff=lfs merge=lfs -text
*.rns filter=lfs diff=lfs merge=lfs -text
*.reason filter=lfs diff=lfs merge=lfs -text

# Unity specific extensions
*.unity filter=lfs diff=lfs merge=lfs -text
*.asset filter=lfs diff=lfs merge=lfs -text
*.cubemap filter=lfs diff=lfs merge=lfs -text
*.unitypackage filter=lfs diff=lfs merge=lfs -text

# Autodesk Fbx cache
*.fbx filter=lfs diff=lfs merge=lfs -text

# Adobe products
*.pdf filter=lfs diff=lfs merge=lfs -text
*.psb filter=lfs diff=lfs merge=lfs -text
*.psd filter=lfs diff=lfs merge=lfs -text

# Skyboxes
*.sbsar filter=lfs diff=lfs merge=lfs -text
*.sbs filter=lfs diff=lfs merge=lfs -text

# Unity Terrain files
*.raw filter=lfs diff=lfs merge=lfs -text

# Unity NavMesh cache files
*.bin filter=lfs diff=lfs merge=lfs -text
EOF

    print_status ".gitattributes file created successfully!"
}

# Function to create or update .gitignore
create_gitignore() {
    print_status "Setting up .gitignore for Unity..."
    
    # Backup existing .gitignore if it exists
    if [[ -f ".gitignore" ]]; then
        print_warning "Existing .gitignore found. Creating backup..."
        cp .gitignore .gitignore.backup
    fi
    
    # Check if Unity-specific ignores already exist
    if [[ -f ".gitignore" ]] && grep -q "# Unity generated" .gitignore; then
        print_status ".gitignore already contains Unity rules."
        return
    fi
    
    cat >> .gitignore << 'EOF'

# macOS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Unity generated
/[Ll]ibrary/
/[Tt]emp/
/[Oo]bj/
/[Bb]uild/
/[Bb]uilds/
/[Ll]ogs/
/[Uu]ser[Ss]ettings/

# MemoryCaptures can get excessive in size.
/[Mm]emoryCaptures/

# Asset meta data should only be ignored when the corresponding asset is also ignored
!/[Aa]ssets/**/*.meta

# Uncomment this line if you wish to ignore the asset store tools plugin
# /[Aa]ssets/AssetStoreTools*

# Autogenerated Jetbrains Rider plugin
/[Aa]ssets/Plugins/Editor/JetBrains*

# Visual Studio cache directory
.vs/

# Gradle cache directory
.gradle/

# Autogenerated VS/MD/Consulo solution and project files
ExportedObj/
.consulo/
*.csproj
*.unityproj
*.sln
*.suo
*.tmp
*.user
*.userprefs
*.pidb
*.booproj
*.svd
*.pdb
*.mdb
*.opendb
*.VC.db

# Unity3D generated meta files
*.pidb.meta
*.pdb.meta
*.mdb.meta

# Unity3D generated file on crash reports
sysinfo.txt

# Builds
*.apk
*.aab
*.unitypackage
*.app

# Crashlytics generated file
crashlytics-build.properties

# Packed Addressables
/[Aa]ssets/[Aa]ddressable[Aa]ssets[Dd]ata/*/*.bin*

# Temporary auto-generated Android Assets
/[Aa]ssets/[Ss]treamingAssets/aa.meta
/[Aa]ssets/[Ss]treamingAssets/aa/*
EOF

    print_status ".gitignore updated with Unity rules!"
}

# Function to configure Git LFS tracking
configure_lfs_tracking() {
    print_status "Configuring Git LFS tracking..."
    
    # Track files that match our .gitattributes patterns
    git add .gitattributes
    
    print_status "Git LFS tracking configured!"
}

# Function to show summary
show_summary() {
    echo ""
    echo -e "${GREEN}✅ Unity Git LFS Setup Complete!${NC}"
    echo ""
    echo "Project Directory: $PROJECT_DIR"
    echo ""
    echo "Summary of changes:"
    echo "  ✓ Git LFS initialized"
    echo "  ✓ .gitattributes created with Unity file patterns"
    echo "  ✓ .gitignore updated with Unity rules"
    echo ""
    echo "Next steps:"
    echo "  1. Review the generated .gitattributes file"
    echo "  2. Navigate to project: cd '$PROJECT_DIR'"
    echo "  3. Add and commit your files: git add . && git commit -m 'Initial Unity project setup with Git LFS'"
    echo "  4. Push to remote: git push origin main"
    echo ""
    echo "Files that will be tracked by Git LFS:"
    echo "  • 3D models (fbx, obj, blend, etc.)"
    echo "  • Audio files (wav, mp3, ogg, etc.)"
    echo "  • Images (png, jpg, psd, etc.)"
    echo "  • Videos (mp4, mov, avi, etc.)"
    echo "  • Unity assets (unity, asset, etc.)"
    echo ""
}

# Main execution
main() {
    # Check for help flag
    if [[ "$1" == "-h" || "$1" == "--help" ]]; then
        print_usage
        exit 0
    fi
    
    print_header
    
    # Set and validate project directory
    set_project_directory "$1"
    
    # Run checks
    check_git_repo
    check_unity_project
    
    # Setup Git LFS
    install_git_lfs
    
    # Create configuration files
    create_gitattributes
    create_gitignore
    
    # Configure LFS tracking
    configure_lfs_tracking
    
    # Show summary
    show_summary
}

# Run the script
main "$@"